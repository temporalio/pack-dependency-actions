name: Check Pack Version

on:
  pull_request:
    branches: [main]

jobs:
  check-pack:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Basic usage - checks .ui-sha file by default
      - name: Check pack version (basic)
        uses: temporalio/pack-dependency-actions/check-version@main
        with:
          pr-number: ${{ github.event.pull_request.number }}
      
      # Advanced usage with custom configuration
      - name: Check UI pack version (advanced)
        uses: temporalio/pack-dependency-actions/check-version@main
        with:
          file-path: '.ui-sha'
          pr-number: ${{ github.event.pull_request.number }}
          comment-title: 'UI Pack Version Mismatch'
          allow-pattern: '^(update|generate|release)-ui-.*'
          update-command: 'pnpm run update-ui'
          comment-body-template: |
            ## {comment_title} ðŸ”„
            
            The UI pack version in `{file_path}` differs from the main branch.
            
            **Main branch:** `{main_version}`
            **This PR:** `{pr_version}`
            
            To update this PR with the latest version from main, run:
            ```bash
            {update_command}
            ```
            
            Or merge the latest main branch:
            ```bash
            git fetch origin main && git merge origin/main
            ```
            
            **Reason:** {reason}
      
      # Multiple pack files example
      - name: Check Registry pack version
        id: check-registry
        continue-on-error: true
        uses: temporalio/pack-dependency-actions/check-version@main
        with:
          file-path: '.registry-sha'
          pr-number: ${{ github.event.pull_request.number }}
          comment-title: 'Registry Pack Version Mismatch'
          allow-pattern: '^(update|generate|release)-registry-.*'
          comment-body-template: |
            ## Registry Pack Version Mismatch ðŸ“¦
            
            The Registry pack version in `{file_path}` differs from the main branch.
            
            **Main branch:** `{main_version}`
            **This PR:** `{pr_version}`
            
            To update this PR with the latest version from main, run:
            ```bash
            git fetch origin main && git merge origin/main
            ```
      
      - name: Check UI pack version
        id: check-ui
        continue-on-error: true
        uses: temporalio/pack-dependency-actions/check-version@main
        with:
          file-path: '.ui-sha'
          pr-number: ${{ github.event.pull_request.number }}
          comment-title: 'UI Pack Version Mismatch'
          allow-pattern: '^(update|generate|release)-ui-.*'
      
      # Fail if either check failed
      - name: Check for failures
        if: steps.check-ui.outcome == 'failure' || steps.check-registry.outcome == 'failure'
        run: |
          echo "One or more pack version checks failed"
          exit 1

  # Example: Using outputs for conditional logic
  conditional-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check version
        id: version-check
        uses: temporalio/pack-dependency-actions/check-version@main
        with:
          file-path: '.ui-sha'
          pr-number: ${{ github.event.pull_request.number }}
      
      - name: Handle based on reason
        run: |
          echo "Should block: ${{ steps.version-check.outputs.should-block }}"
          echo "Reason: ${{ steps.version-check.outputs.reason }}"
          echo "PR modified file: ${{ steps.version-check.outputs.pr-modified }}"
          
          if [[ "${{ steps.version-check.outputs.reason }}" == *"New version file"* ]]; then
            echo "This PR adds a new version file - no comparison needed"
          elif [[ "${{ steps.version-check.outputs.pr-modified }}" == "false" ]]; then
            echo "PR hasn't modified the version file - just outdated"
          fi