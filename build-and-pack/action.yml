name: 'Build and Pack'
description: 'Build and pack a dependency with custom commands'

inputs:
  source-path:
    description: 'Path to source code'
    required: false
    default: 'source'
  build-command:
    description: 'Build command before packing'
    required: false
  pack-command:
    description: 'Custom pack command'
    required: false
  remove-prepare:
    description: 'Remove prepare script'
    required: false
    default: 'true'

outputs:
  package-file:
    description: 'Path to created package'
    value: ${{ steps.pack.outputs.package-file }}

runs:
  using: composite
  steps:
    - name: Prepare source
      shell: bash
      run: |
        cd "${{ inputs.source-path }}"

        # Remove prepare script if requested
        if [ "${{ inputs.remove-prepare }}" = "true" ] && [ -f "package.json" ]; then
          echo "Removing prepare script..."
          cat package.json | jq 'del(.scripts.prepare)' > package.json.tmp
          mv package.json.tmp package.json
        fi

    - name: Install dependencies
      shell: bash
      run: |
        cd "${{ inputs.source-path }}"
        pnpm install --frozen-lockfile --ignore-scripts

    - name: Build package
      if: inputs.build-command != ''
      shell: bash
      run: |
        cd "${{ inputs.source-path }}"
        echo "Running: ${{ inputs.build-command }}"
        eval "${{ inputs.build-command }}"

    - name: Pack dependency
      id: pack
      shell: bash
      run: |
        SOURCE_PATH="${{ inputs.source-path }}"

        cd "$SOURCE_PATH"

        # Run pack command
        if [ -n "${{ inputs.pack-command }}" ]; then
          echo "Running: ${{ inputs.pack-command }}"
          eval "${{ inputs.pack-command }}"

          # The pack command should have created a .tgz file
          # Find it (could be in current dir or a subdirectory)
          PACKED_FILE=$(find . -name "*.tgz" -type f -mmin -1 | head -1)
        else
          # Default: use pnpm pack to current directory
          pnpm pack
          PACKED_FILE=$(ls -t *.tgz | head -1)
        fi

        if [ -z "$PACKED_FILE" ]; then
          echo "Error: No pack file created"
          exit 1
        fi

        echo "Found packed file: $PACKED_FILE"
        echo "package-file=$PACKED_FILE" >> $GITHUB_OUTPUT
