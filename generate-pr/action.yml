name: 'Generate Dependency PR'
description: 'Generate a PR with packed dependencies'

inputs:
  repository:
    description: 'Source repository (owner/name)'
    required: true
  target-sha:
    description: 'Target commit SHA or branch'
    required: false
  package-name:
    description: 'Package name in package.json'
    required: false
  pack-destination:
    description: 'Directory for packed files'
    required: false
    default: './packs'
  package-command:
    description: 'Build command before packing'
    required: false
  pack-command:
    description: 'Custom pack command'
    required: false
  file-path:
    description: 'Version file path'
    required: false
    default: '.sha'
  allow-rollback:
    description: 'Allow older commits'
    required: false
    default: 'false'
  pr-title-template:
    description: 'PR title template'
    required: false
    default: 'Update {repository} to {short_sha}'
  pr-body-template:
    description: 'PR body template'
    required: false
    default: |
      ## Updates {repository} to {short_sha}

      Full SHA: {full_sha}

      ### Changelog
      {changelog}
  labels:
    description: 'PR labels'
    required: false
  draft:
    description: 'Create as draft'
    required: false
    default: 'true'
  token:
    description: 'GitHub token'
    required: true

outputs:
  pull-request-number:
    description: 'PR number'
    value: ${{ steps.create-pr.outputs.pull-request-number }}
  pull-request-url:
    description: 'PR URL'
    value: ${{ steps.create-pr.outputs.pull-request-url }}

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate SHA
      id: validate
      uses: temporalio/pack-dependency-actions/validate-sha@main
      with:
        repository: ${{ inputs.repository }}
        target-sha: ${{ inputs.target-sha }}
        file-path: ${{ inputs.file-path }}
        allow-rollback: ${{ inputs.allow-rollback }}

    - name: Download source
      uses: temporalio/pack-dependency-actions/download-source@main
      with:
        repository: ${{ inputs.repository }}
        sha: ${{ steps.validate.outputs.resolved-sha }}
        token: ${{ inputs.token }}

    - name: Build and pack
      id: pack
      uses: temporalio/pack-dependency-actions/build-and-pack@main
      with:
        source-path: source
        pack-destination: ${{ inputs.pack-destination }}
        build-command: ${{ inputs.package-command }}
        pack-command: ${{ inputs.pack-command }}
        package-name: ${{ inputs.package-name }}
        sha: ${{ steps.validate.outputs.resolved-sha }}

    - name: Update version file
      shell: bash
      run: |
        echo "# SHA of the last packed version" > ${{ inputs.file-path }}
        echo "${{ steps.validate.outputs.resolved-sha }}" >> ${{ inputs.file-path }}

    - name: Update package.json
      if: inputs.package-name != ''
      shell: bash
      run: |
        PACKAGE_NAME="${{ inputs.package-name }}"
        PACKAGE_FILE="${{ steps.pack.outputs.package-file }}"

        echo "Updating package.json to reference $PACKAGE_FILE"
        cat package.json | jq ".dependencies[\"$PACKAGE_NAME\"] = \"file:$PACKAGE_FILE\"" > package.json.tmp
        mv package.json.tmp package.json

    - name: Generate changelog
      id: changelog
      uses: temporalio/pack-dependency-actions/generate-changelog@main
      with:
        repository: ${{ inputs.repository }}
        from-sha: ${{ steps.validate.outputs.last-sha }}
        to-sha: ${{ steps.validate.outputs.resolved-sha }}
        format: markdown

    - name: Prepare PR
      id: prepare
      shell: bash
      run: |
        # Prepare variables
        REPOSITORY="${{ inputs.repository }}"
        SHORT_SHA="${{ steps.validate.outputs.short-sha }}"
        FULL_SHA="${{ steps.validate.outputs.resolved-sha }}"
        CHANGELOG="${{ steps.changelog.outputs.changelog }}"

        # Generate branch name
        REPO_NAME=$(echo "$REPOSITORY" | cut -d'/' -f2)
        BRANCH="update-${REPO_NAME}-${SHORT_SHA}"
        echo "branch=$BRANCH" >> $GITHUB_OUTPUT

        # Process title
        TITLE="${{ inputs.pr-title-template }}"
        TITLE="${TITLE//\{repository\}/$REPOSITORY}"
        TITLE="${TITLE//\{short_sha\}/$SHORT_SHA}"
        TITLE="${TITLE//\{full_sha\}/$FULL_SHA}"
        echo "title=$TITLE" >> $GITHUB_OUTPUT

        # Process body
        BODY="${{ inputs.pr-body-template }}"
        BODY="${BODY//\{repository\}/$REPOSITORY}"
        BODY="${BODY//\{short_sha\}/$SHORT_SHA}"
        BODY="${BODY//\{full_sha\}/$FULL_SHA}"
        BODY="${BODY//\{changelog\}/$CHANGELOG}"

        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Clean up source
      shell: bash
      run: rm -rf source source.tar.gz

    - name: Create pull request
      id: create-pr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ inputs.token }}
        branch: ${{ steps.prepare.outputs.branch }}
        title: ${{ steps.prepare.outputs.title }}
        body: ${{ steps.prepare.outputs.body }}
        labels: ${{ inputs.labels }}
        draft: ${{ inputs.draft }}
        commit-message: 'chore: update ${{ inputs.repository }} to ${{ steps.validate.outputs.short-sha }}'
        add-paths: |
          package.json
          pnpm-lock.yaml
          ${{ inputs.pack-destination }}
          ${{ inputs.file-path }}
